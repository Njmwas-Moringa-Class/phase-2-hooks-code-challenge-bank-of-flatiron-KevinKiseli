{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/moringa/Documents/Phase 2/Has to work code challenge/phase-2-hooks-code-challenge-bank-of-flatiron-KevinKiseli/src/components/AccountContainer.js\",\n    _s = $RefreshSig$();\n\n// // import React from \"react\";\n// // import TransactionsList from \"./TransactionsList\";\n// // import Search from \"./Search\";\n// // import AddTransactionForm from \"./AddTransactionForm\";\n// // function AccountContainer() {\n// //   return (\n// //     <div>\n// //       <Search />\n// //       <AddTransactionForm />\n// //       <TransactionsList />\n// //     </div>\n// //   );\n// // }\n// // export default AccountContainer;\n// This achieved the first deliverable\n// // AccountContainer.js\n// import React, {useState} from \"react\";\n// import TransactionsList from \"./TransactionsList\";\n// import Search from \"./Search\";\n// import AddTransactionForm from \"./AddTransactionForm\";\n// function AccountContainer() {\n//   const [transactions, listTransactions] = useState([]);\n//   const handleAddTransaction = (newTransaction) => {\n//     // Add logic to handle the new transaction data, for now, just log it\n//     listTransactions([...transactions, newTransaction]);\n//     console.log(\"New transaction data:\", newTransaction);\n//   };\n//   return (\n//     <div>\n//       <Search />\n//       <AddTransactionForm onAddTransaction={handleAddTransaction} transactions={transactions}/>\n//       <TransactionsList />\n//     </div>\n//   );\n// }\n// export default AccountContainer;\n// This achieved the second achie\nimport React, { useState } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction AccountContainer() {\n  _s();\n\n  const [transactions, setTransactions] = useState([]);\n\n  const handleAddTransaction = newTransaction => {\n    // Update state to include the new transaction\n    setTransactions([...transactions, newTransaction]); // Post the new transaction to the backend API for persistence\n\n    fetch(\"http://localhost:8001/transactions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newTransaction)\n    }).then(response => response.json()).then(data => console.log(\"Transaction posted successfully:\", data)).catch(error => console.error(\"Error posting transaction:\", error));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTransactionForm, {\n      onAddTransaction: handleAddTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionsList, {\n      onUpdateTransactions: setTransactions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountContainer, \"Tz1qIkShCHvLh/M7ZupqdoMUajU=\");\n\n_c = AccountContainer;\nexport default AccountContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountContainer\");","map":{"version":3,"sources":["/home/moringa/Documents/Phase 2/Has to work code challenge/phase-2-hooks-code-challenge-bank-of-flatiron-KevinKiseli/src/components/AccountContainer.js"],"names":["React","useState","TransactionsList","Search","AddTransactionForm","AccountContainer","transactions","setTransactions","handleAddTransaction","newTransaction","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","catch","error"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAEA,SAASC,gBAAT,GAA4B;AAAA;;AAC1B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMO,oBAAoB,GAAIC,cAAD,IAAoB;AAC/C;AACAF,IAAAA,eAAe,CAAC,CAAC,GAAGD,YAAJ,EAAkBG,cAAlB,CAAD,CAAf,CAF+C,CAI/C;;AACAC,IAAAA,KAAK,CAAC,oCAAD,EAAuC;AAC1CC,MAAAA,MAAM,EAAE,MADkC;AAE1CC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFiC;AAK1CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,cAAf;AALoC,KAAvC,CAAL,CAOGO,IAPH,CAOSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAPtB,EAQGF,IARH,CAQSG,IAAD,IAAUC,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDF,IAAhD,CARlB,EASGG,KATH,CASUC,KAAD,IAAWH,OAAO,CAACG,KAAR,CAAc,4BAAd,EAA4CA,KAA5C,CATpB;AAUD,GAfD;;AAiBA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,kBAAD;AAAoB,MAAA,gBAAgB,EAAEf;AAAtC;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,gBAAD;AAAkB,MAAA,oBAAoB,EAAED;AAAxC;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA3BQF,gB;;KAAAA,gB;AA6BT,eAAeA,gBAAf","sourcesContent":["// // import React from \"react\";\n// // import TransactionsList from \"./TransactionsList\";\n// // import Search from \"./Search\";\n// // import AddTransactionForm from \"./AddTransactionForm\";\n\n// // function AccountContainer() {\n// //   return (\n// //     <div>\n// //       <Search />\n// //       <AddTransactionForm />\n// //       <TransactionsList />\n// //     </div>\n// //   );\n// // }\n\n// // export default AccountContainer;\n\n\n\n\n\n\n\n\n// This achieved the first deliverable\n\n// // AccountContainer.js\n\n// import React, {useState} from \"react\";\n// import TransactionsList from \"./TransactionsList\";\n// import Search from \"./Search\";\n// import AddTransactionForm from \"./AddTransactionForm\";\n\n// function AccountContainer() {\n\n//   const [transactions, listTransactions] = useState([]);\n\n//   const handleAddTransaction = (newTransaction) => {\n//     // Add logic to handle the new transaction data, for now, just log it\n//     listTransactions([...transactions, newTransaction]);\n//     console.log(\"New transaction data:\", newTransaction);\n//   };\n\n//   return (\n//     <div>\n//       <Search />\n//       <AddTransactionForm onAddTransaction={handleAddTransaction} transactions={transactions}/>\n//       <TransactionsList />\n//     </div>\n//   );\n// }\n\n// export default AccountContainer;\n\n\n\n\n\n\n// This achieved the second achie\n\nimport React, { useState } from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction AccountContainer() {\n  const [transactions, setTransactions] = useState([]);\n\n  const handleAddTransaction = (newTransaction) => {\n    // Update state to include the new transaction\n    setTransactions([...transactions, newTransaction]);\n\n    // Post the new transaction to the backend API for persistence\n    fetch(\"http://localhost:8001/transactions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(newTransaction),\n    })\n      .then((response) => response.json())\n      .then((data) => console.log(\"Transaction posted successfully:\", data))\n      .catch((error) => console.error(\"Error posting transaction:\", error));\n  };\n\n  return (\n    <div>\n      <Search />\n      <AddTransactionForm onAddTransaction={handleAddTransaction} />\n      <TransactionsList onUpdateTransactions={setTransactions} />\n    </div>\n  );\n}\n\nexport default AccountContainer;\n"]},"metadata":{},"sourceType":"module"}